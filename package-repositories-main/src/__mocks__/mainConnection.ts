enum ConnectionStates {
  disconnected = 0,
  connected = 1,
  connecting = 2,
  disconnecting = 3,
  uninitialized = 99,
}

const mockNodeEvents = {
  addListener: jest.fn(() => null),
  defaultMaxListeners: 0,
  emit: jest.fn(() => true),
  eventNames: jest.fn(() => null),
  getMaxListeners: jest.fn(() => null),
  listenerCount: jest.fn(() => 0),
  listeners: jest.fn(() => null),
  off: jest.fn(() => null),
  on: jest.fn(() => null),
  once: jest.fn(() => null),
  prependListener: jest.fn(() => null),
  prependOnceListener: jest.fn(() => null),
  rawListeners: jest.fn(() => null),
  removeAllListeners: jest.fn(() => null),
  removeListener: jest.fn(() => null),
  setMaxListeners: jest.fn(() => null),
};

const mockBaseDb = {
  collection: jest.fn(() => null),
  collections: {},
};

const mockDb = {
  ...mockNodeEvents,
  ...mockBaseDb,
  close: jest.fn(() => Promise.resolve(null)),
  config: {},
  createCollection: jest.fn(() => Promise.resolve(null)),
  db: {
    ...mockNodeEvents,
    ...mockBaseDb,
    addUser: jest.fn(() => Promise.resolve(null)),
    admin: jest.fn(() => null),
    bufferMaxEntries: 0,
    command: jest.fn(() => Promise.resolve(null)),
    createCollection: jest.fn(() => Promise.resolve(null)),
    createIndex: jest.fn(() => Promise.resolve(null)),
    databaseName: 'test-db',
    dropCollection: jest.fn(() => null),
    dropDatabase: jest.fn(() => Promise.resolve(null)),
    executeDbAdminCommand: jest.fn(() => Promise.resolve(null)),
    indexInformation: jest.fn(() => Promise.resolve(null)),
    listCollections: jest.fn(() => null),
    native_parser: false,
    options: {},
    profilingInfo: jest.fn(() => Promise.resolve(null)),
    profilingLevel: jest.fn(() => Promise.resolve(null)),
    removeUser: jest.fn(() => Promise.resolve(null)),
    renameCollection: jest.fn(() => Promise.resolve(null)),
    serverConfig: {},
    setProfilingLevel: jest.fn(() => Promise.resolve(null)),
    slaveOk: true,
    stats: jest.fn(() => Promise.resolve(null)),
    writeConcern: {},
  },
  deleteModel: jest.fn(() => null),
  dropCollection: jest.fn(() => Promise.resolve(null)),
  dropDatabase: jest.fn(() => Promise.resolve(null)),
  eventNames: jest.fn(() => null),
  model: jest.fn(() => ({})),
  modelNames: jest.fn(() => []),
  models: {},
  openUri: jest.fn(() => Promise.resolve(null)),
  readyState: ConnectionStates.connected,
  startSession: jest.fn(() => Promise.resolve(null)),
  states: ConnectionStates,
  useDb: jest.fn(() => null),
};

export const mainConnection = {
  db: mockDb,
  status: 'connected',
  close: jest.fn(() => Promise.resolve(null)),
  connect: jest.fn(() => null),
  ensureIsConnected: jest.fn(() => null),
};
