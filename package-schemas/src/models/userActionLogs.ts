import { Document, Schema } from 'mongoose';

export enum UserActionLogEvent {
  LOGIN_COMPLETE_PASSWORD = 'LOGIN_COMPLETE_PASSWORD',
  LOGIN_FAILED_PASSWORD = 'LOGIN_FAILED_PASSWORD',
  LOGIN_FAILED_2FA = 'LOGIN_FAILED_2FA',
  LOGIN_FAILED_WHILE_ACCOUNT_FROZEN = 'LOGIN_FAILED_WHILE_ACCOUNT_FROZEN',
  LOGIN_FAILED_WHILE_ACCOUNT_FROZEN_CUSTOMER_WISH = 'LOGIN_FAILED_WHILE_ACCOUNT_FROZEN_CUSTOMER_WISH',
  VERIFY_EMAIL_SUCCESS = 'VERIFY_EMAIL_SUCCESS',
  RESET_PASSWORD_REQUEST = 'RESET_PASSWORD_REQUEST',
  RESET_PASSWORD_COMPLETE = 'RESET_PASSWORD_COMPLETE',
  CHANGE_PASSWORD_REQUEST = 'CHANGE_PASSWORD_REQUEST',
  CHANGE_PASSWORD_COMPLETE = 'CHANGE_PASSWORD_COMPLETE',
  LOGIN_SAFETYNET_FAILED = 'LOGIN_SAFETYNET_FAILED',
  TWO_FACTOR_ENABLED = 'TWO_FACTOR_ENABLED',
  TWO_FACTOR_DISABLED = 'TWO_FACTOR_DISABLED',
  SCA_LOGIN_COMPLETED = 'SCA_LOGIN_COMPLETED',
  SCA_LOGIN_FAILED = 'SCA_LOGIN_FAILED',
  SCA_SIGNING_LOGIN_COMPLETED = 'SCA_SIGNING_LOGIN_COMPLETED',
  SCA_SIGNING_LOGIN_FAILED = 'SCA_SIGNING_LOGIN_FAILED',
  REFRESH_SESSION_COMPLETED = 'REFRESH_SESSION_COMPLETED',
  CREATE_BTC_WALLET_COMPLETED = 'CREATE_BTC_WALLET_COMPLETED',
  CREATE_ETH_WALLET_COMPLETED = 'CREATE_ETH_WALLET_COMPLETED',
  BITWALA_DEVICE_PAIRING_SUCCESS = 'BITWALA_DEVICE_PAIRING_SUCCESS',
  BITWALA_DEVICE_UNPAIRING_SUCCESS = 'BITWALA_DEVICE_UNPAIRING_SUCCESS',
  SIGNATURE_VERIFICATION_SUCCESS = 'SIGNATURE_VERIFICATION_SUCCESS',
  RESTORE_ETH_WALLET_COMPLETED = 'RESTORE_ETH_WALLET_COMPLETED',
  CREATE_USER_COMPLETED = 'CREATE_USER_COMPLETED',
  SOLARIS_PERSON_CREATED = 'SOLARIS_PERSON_CREATED',
  SOLARIS_IDENTIFICATION_CREATED = 'SOLARIS_IDENTIFICATION_CREATED',
  NEW_USER_KYC_COMPLETED = 'NEW_USER_KYC_COMPLETED',
  SOLARIS_AUTO_IDENT_CREATED = 'SOLARIS_AUTO_IDENT_CREATED',
  SEPA_TRANSFER_COMPLETED = 'SEPA_TRANSFER_COMPLETED',
  SEND_BTC_COMPLETED = 'SEND_BTC_COMPLETED',
  SEND_ETH_COMPLETED = 'SEND_ETH_COMPLETED',
  AFFILIATE_NEW_EMAIL_VERIFIED = 'AFFILIATE_NEW_EMAIL_VERIFIED',
  AFFILIATE_ONBOARDING_COMPLETE = 'AFFILIATE_ONBOARDING_COMPLETE',
  CELSIUS_OPEN_ACCOUNT_REQUEST = 'CELSIUS_OPEN_ACCOUNT_REQUEST',
  CELSIUS_DEPOSIT_REQUEST = 'CELSIUS_DEPOSIT_REQUEST',
  CELSIUS_WITHDRAW_REQUEST = 'CELSIUS_WITHDRAW_REQUEST',
  // TODO Deprecated, needs to be removed when auto buy code is removed | IT-3833
  AUTOBUY_ORDER_CONFIRMED_BTC = 'AUTOBUY_ORDER_CONFIRMED_BTC',
  AUTOBUY_ORDER_CONFIRMED_ETH = 'AUTOBUY_ORDER_CONFIRMED_ETH',
  SDA_CONFIRM_TRANSACTION_SUCCESS = 'SDA_CONFIRM_TRANSACTION_SUCCESS',
  SDA_CONFIRM_TRANSACTION_FAILED = 'SDA_CONFIRM_TRANSACTION_FAILED',
  SDA_CANCEL_TRANSACTION_SUCCESS = 'SDA_CANCEL_TRANSACTION_SUCCESS',
  SDA_CANCEL_TRANSACTION_FAILED = 'SDA_CANCEL_TRANSACTION_FAILED',
  // Auto buy ETH for wallet type Vault
  ABUY_ORDER_ETH_VAULT_NEW = 'ABUY_ORDER_ETH_VAULT_NEW',
  ABUY_ORDER_ETH_VAULT_CANCELLED = 'ABUY_ORDER_ETH_VAULT_CANCELLED',
  // Auto buy BTC for wallet type Vault
  ABUY_ORDER_BTC_VAULT_NEW = 'ABUY_ORDER_BTC_VAULT_NEW',
  ABUY_ORDER_BTC_VAULT_CANCELLED = 'ABUY_ORDER_BTC_VAULT_CANCELLED',
  // Auto buy ETH for wallet type Cutody
  ABUY_ORDER_ETH_CUSTODY_NEW = 'ABUY_ORDER_ETH_CUSTODY_NEW',
  ABUY_ORDER_ETH_CUSTODY_CANCELLED = 'ABUY_ORDER_ETH_CUSTODY_CANCELLED',
  // Auto buy BTC for wallet type Cutody
  ABUY_ORDER_BTC_CUSTODY_NEW = 'ABUY_ORDER_BTC_CUSTODY_NEW',
  ABUY_ORDER_BTC_CUSTODY_CANCELLED = 'ABUY_ORDER_BTC_CUSTODY_CANCELLED',
  // Change email flow
  CONFIRM_CURRENT_EMAIL_ADDRESS = 'CONFIRM_CURRENT_EMAIL_ADDRESS',
  CONFIRM_NEW_EMAIL_ADDRESS = 'CONFIRM_NEW_EMAIL_ADDRESS',
  VERIFY_EMAIL_ADDRESS = 'VERIFY_EMAIL_ADDRESS',
  CONFIRM_PERSONAL_DATA_CHANGE_REQUEST = 'CONFIRM_PERSONAL_DATA_CHANGE_REQUEST',
}

export interface UserActionLog {
  ipAddress: string;
  viewerCountry: string;
  userAgent: string;
  event: UserActionLogEvent;
  owner: string;
  meta?: object;
  deviceId?: string;
  sessionTokenHash?: string;
  anonymisedAt?: Date;
}

export type UserActionLogDoc = Document & UserActionLog;

export const userActionLogsSchema: Schema = new Schema(
  {
    ipAddress: {
      type: String,
      required: true,
    },
    viewerCountry: {
      type: String,
      match: /^[A-Z]{2}$/,
      required: true,
    },
    userAgent: {
      type: String,
      required: true,
    },
    event: {
      type: String,
      enum: Object.values(UserActionLogEvent),
      required: true,
    },
    owner: {
      type: String,
      required: true,
      index: true,
    },
    meta: {
      type: Object,
    },
    deviceId: {
      type: String,
      required: false,
    },
    sessionTokenHash: {
      type: String,
      required: false,
    },
    anonymisedAt: {
      type: Date,
      required: false,
    },
  },
  { timestamps: true, collection: 'user-action-logs' }
);
